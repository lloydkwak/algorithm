정의
개념간의 연결 관계를 표현하는 자료구조

그래프 G(V, E)
어떤 자료나 개념을 표현하는 정점(vertex)들의 집합 V
+ 이들을 연결한 간선(edge)들의 집합 E

----------------------------------------------------------------------------------------------------------------------

*그래프는 정점이나 간선에 추가적인 속성을 부여하거나, 형태에 제약을 둘 수있다.
- 방향 그래프(directed graph) : 간선에 방향이라는 속성을 추가 ---> 방향이 없는 그래프 = 무향 그래프(undirected graph)
- 가중치 그래프(weighted graph) : 간선에 가중치(weight)라는 실수 속성 부여
- 다중 그래프(multigraph) : 그래프의 형태로 그래프 표현. 두 지점을 잇는 두 개 이상의 간선
---> 두 정점 사이에 최대 하나의 간선만 가지면 = 단순 그래프(simple graph) 
- 루트 없는 그래프(unrooted tree) : 트리와 같은 형태의 무향 그래프(부모/자식 관계가 없음) ---> 단순 그래프에 속한다
- 이분 그래프(bipartite graph) : 정점을 겹치지 않는 두 개의 그룹으로 나누고, 서로 다른 그룹 정점들만 간선을 가지는 그래프

: 두 가지 이상의 속성을 함께 가지는 경우도 있다.
ex) 사이클 없는 방향 그래프(directed acyclic graph) = DAG는 한 점에서 출발해 그 점으로 돌아오는 경로가 없다.

----------------------------------------------------------------------------------------------------------------------

경로(path) : 끝이 서로 연결된 간선들을 순서대로 나열한 것.
- 단순 경로(simple path) : 경로 중 한 정점을 최대 한 번만 지나는 경로
- 사이클(cycle) : 시작 점에서 끝나는 경로(회로라고 부르기도 함)

----------------------------------------------------------------------------------------------------------------------

암시적 그래프(implicit graph) : 그래프의 형태를 가지지 않더라도 그래프를 활용하면 해결 할 수 있는 문제에 대한 그래프
- 위상 정렬(topological sorting) : 의존 관계가 있는 일을 해나가는 방법의 순서를 계산하는 문제 = 깊이 우선 탐색

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------

그래프 표현
: 트리와 같이 정점을 객체로 표현할 수 있다. 그러나 대부분 그래프는 트리보다 훨씬 정적으로 활용된다
---> 그래프 구조의 변경이 어렵더라도 간단하고 메모리를 적게 차지하는 방법으로 구현

----------------------------------------------------------------------------------------------------------------------

1. 인접 리스트(adjacency list)
: 각 정점마다 나가는 간선의 목록을 저장

vector<list<int>> adjacency;

---> adjacency[i] = 정점 i와 간선을 통해 연결된 정점들의 번호 리스트

*간선에 추가적 속성이 필요한 경우(pair<int, int>를 많이 활용함)
-간선의 정보를 구조체로 표현

struct Edge {
    int vertex;
    int weight;
    ...
}

2. 인접 행렬 표현(adjacency martrix) : 두 간선의 연결 여부를 쉽게 확인하기 위해 고안된 그래프 형태

vector<vector<bool>> adjacency;

---> adjacency[i, j] = 정점 i에서 정점 j로 가는 간선이 있는지 여부

----------------------------------------------------------------------------------------------------------------------











