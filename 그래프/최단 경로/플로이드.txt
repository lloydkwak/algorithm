
/*
반복적 동적 계획법 + 슬라이딩 기법 공부
*/


모든 정점 쌍 최단거리 알고리즘 중 가장 간단하고 빠른 알고리즘 중 하나이다.

모든 정점 쌍에 대한 최단 거리를 저장하는 dist[][]를 계산

점화식
: C[k][u][v] = min(C[k - 1][u][v], C[k-1][u][k] + C[k-1][k][v]);
---> k를 경유하는 경우, 안하는 경우.
---> O(|V|^3)

*** 슬라이딩 기법 + C[k-1][u][k] == C[k][u][k] 특성을 이용해 메모리 최적화 가능
---> C[u][v] = min(C[u][v], C[u][k] + C[k][v]);
---> C배열 생성 없이 adj로 바로 적용가능

----------------------------------------------------------------------------------------

//정점의 개수
int v;
//그래프 인접 행렬
int adj[MAX_V][MAX_V];

//플로이드 모든 쌍 최단거리 알고리즘
void floyd(){
    for(int i = 0; i < v; ++i){
        adj[i][i] = 0;
    }
    for(int k = 0; k < v; ++k){
        for(int i = 0; i < v; ++i){
            //i에서 k로 가는 경로 존재 여부 확인을 통해 최적화 가능능
            for(int j = 0; j < v; ++j){
                adj[i][j] = min(adj[i][j], adj[i][k] + adj[k][j]);
            }
        }
    }
}

----------------------------------------------------------------------------------------

최단 경로 구하기

//정점의 개수
int v;
//그래프 인접 행렬
int adj[MAX_V][MAX_V];
//via[u][v] = u에서 v까지 가는 최단 경로가 경유하는 점 중 가장 번호가 큰 정점
//-1로 초기화
int via[MAX_V][MAX_V];

//플로이드 모든 쌍 최단거리 알고리즘
void floyd2(){
    for(int i = 0; i < v; ++i){
        adj[i][i] = 0;
    }
    memset(via, -1, sizeof(via));
    for(int k = 0; k < v; ++k){
        for(int i = 0; i < v; ++i){
            for(int j = 0; j < v; ++j){
                if(adj[i][j] > adj[i][k] + adj[k][j]){
                    via[i][j] = k;
                    adj[i][j] = adj[i][k] + adj[k][j];
                }
            }
        }
    }
}

//u에서 v까지 가는 최단 경로를 계산하여 path에 저장
void reconstruct(int u, int v, vector<int>& path){
    //기저 사례
    if(via[u][v] == -1){
        path.push_back(u);
        if(u != v) path.push_back(v);
    }
    else {
        int w = via[u][v];
        reconstruct(u, w, path);
        path.pop_back();
        reconstruct(w, v, path);
    }
}

----------------------------------------------------------------------------------------

도달 가능성
: 최소치 연산을 or, 더하기 연산은 &&로 바꾸면 된다

---> adj[i][j] = adj[i][j] || (adj[i][k] && adj[k][j]);