다익스트라(dijkstra)
: 단일 시작점 최단 경로 알고리즘.

= BFS + 우선순위큐

***유의
각 정점 까지 최단 경로가 갱신 될 가능성 존재
이미 우선순위큐에 들어간 경로는 그대로 두고 최단 경로를 추가 한뒤 나주에 이전 값을 무시한다.
---> dist[u]와 우선순위큐에 있는 u를 비교

//정점의 개수
int v;
//그래프 인접 리스트
vector<pair<int, int>> adj[MAX_V];

vector<int> dijkstra(int src){
    vector<int> dist(V, INF);
    dist[src] = 0;
    priority_queue<pair<int, int>> pq;      //priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
    pq.push(make_pair(0, src));             //위와 같이 선언하면 오름차순 정렬로 -를 붙일 필요는 없음
    while(!pq.empty()){
        int cost = -pq.top().first;
        int here = pq.top().second;
        pq.pop();
        //최소 경로 갱신시 지금 꺼낸 것을 무시
        if(dist[here] < cost) continue;
        for(int i = 0; i < adj[here].size(); ++i){
            int there = adj[here][i].first;
            int nextDist = cost + adj[here][i].second;
            if(dist[there] > nextDist){
                dist[there] = nextDist;
                //우선순위큐는 내림차순 정렬이기 때문에 -를 붙여서 오름차순으로 사용
                pq.push(make_pair(-nextDist, there));
            }
        }
    }
    return dist;
}

-----------------------------------------------------------------------------------------------------------

정당성 증명

귀류법

1. 가정 : 최단 거리를 계산하기 모하는 정점 u가 있다고 가정.
2. u에 방문하는 순간, u 이전에 방문한 점들과 아닌 점들로 그래프를 나눌 수 있다.
3. 가정에 의하면 스패닝 트리에서의 경로보다 가까운 경로 존재
4. 최단 경로를 반대로 따라가면 언젠가는 방문한 정점을 만나게 됨. ---> 이 정점을 p, 직전 정점을 q라 하자.
5. p는 방문 한 정점이므로 dist[p]는 이미 저장되어있고, q, u는 모두 우선순위큐에 들어있다.
6. u가 먼저 나왔다는 뜻은 dist[u] <= dist[q]라는 의미이므로 u로 가는 더 짧은 경로가 있다는것에 모순이다.

***이 증명은 가중치가 0 이상인 경우에만 가능
---> 다익스트라 알고리즘은 음수 가중치를 가지는 그래프에는 적용 불가.

-----------------------------------------------------------------------------------------------------------

시간 복잡도
- 각 정점마다 인접한 간선들을 모두 검사하는 작업
- 우선순위 큐에 원소를 넣고 삭제하는 작업

O(|E|lg|E|)
: 대개의 경우 그래프 간선의 수 |E| < |V^2| ---> O(|E|lg|V|)

-----------------------------------------------------------------------------------------------------------

*정점의 수가 적거나 간선의 수가 매우 많은 경우
---> 우선순위 큐 없이 매 정점에서 인접한 간선중 가중치가 가장 낮은 간선을 반복문으로 찾아 방문
---> visited[] 따로 유지

vector<int> dijkstra2(int src){
    vector<int> dist(V, INF);
    vector<bool> visited(V, false);
    dist[src] = 0; visited[src] = false;
    while(true){
        int closest = INF, here;
        for(int i = 0; i < V; ++i){
            here = i;
            closest = dist[i];
        }
        if(closest == INF) break;
        visited[here] = true;
        for(int i = 0; i < adj[here].size(); ++i){
            int there = adj[here][i].first;
            if(visited[there]) continue;
            int nextDist = dist[here] + adj[here][i].second;
            dist[there] = min(dist[there], nextDist);
        }
    }
    return dist;
}
