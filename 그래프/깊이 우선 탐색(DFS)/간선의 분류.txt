DFS 스패닝 트리 
: 그래프를 깊이 우선 탐색을 통해 탐색하는 과정에서 지난 간선 모아 트리 형태로 만든것

트리 간선(tree edge) : 스패닝 트리에 포함된 간선

순방향 간선(forward edge) : 스패닝 트리의 선조에서 자손으로 연결 되지만 트리의 간선은 아닌 선

역방향 간선(back edge) : 스패닝 트리의 자손에서 선조로 연결된 간선

교차 간선(cross edge) : 위 세 가지 분류를 제외한 나머지 간선

*무향 그래프 : 모든 간선이 양방향 통행이 가능하여 교차 간선이 존재하지 않는다.
            + 순방향 간선과 역방향 간선 사이의 구분이 없다.

--------------------------------------------------------------------------------------------------------

그래프에서 간선 구분하는법
dfs() 수행 과정에서 visited 뿐만 아니라 discoverd[]를 만들어 몇번째로 발견된 정점인지 저장한다.
---> discoverd의 값이 0이 아니라면 방문 했다는 뜻이므로 visited를 대체할 수 있다

(u, v)를 검사하는 과정에서 v가 발견이 된 경우
1. 순방향 간선 : discoverd[v] > discoverd[u] 
2. 역방향 간선 : discoverd[v] > discoverd[u] + dfs(v)는 아직 진행준
3. 교차 간선 : discoverd[v] > discoverd[u] + dfs(v)는 종료

//그래프 인접 리스트 표현
vector<vector<int>> adj;
//finifhed[i] = dfs(i) 종료 ? 1 : 0;
vector<int> discoverd, finifhed;
int counter = 0;

void dfs2(int here){
    discoverd[here] = counter++;
    for(int i = 0; i < adj[here].size; ++i){
        int there = adj[here][i];
        if(discoverd[there] == -1) {
            //tree edge
            dfs(there);
        }
        else if(directed[there] < discoverd[here]){
            //forward edge
        }
        else if(finifhed[there] == 0){
            //back edge
        }
        else //cross edge
    }
    finifhed[here] = 1;
}

--------------------------------------------------------------------------------------------------------

간선의 분류를 이용한 위상 정렬의 정당성 증면

위상 정렬은 dfs()의 종료 역순으로 정점을 배열
---> dfs(u)가 dfs(v)보다 일찍 종료 될때 u -> v 간선이 존재 할 수 없음을 증명

귀류법 : (u, v)가 있다고 가정
1. (u, v)가 트리 간선이라면
dfs(u)가 dfs(v)를 호출 했다는 의미이므로 모순 발생

2. (u, v) 역방향 간선이라면
v가 u의 선조 --> v에서 u로 가는 경로가 있다는 의미 ---> 위상정렬에서 DAG라는 가정에 모순

3. (u, v) 순방향 간선 ---> (1)번과 같은 이유로 모순

4 (u, v)가 교차 간선이라면
dfs(v)가 종료후 u를 방문 했다는 의미 ---> dfs(u)가 먼저 종료했다는 것과 모순 

--------------------------------------------------------------------------------------------------------

*사이클 존재 여부 확인 = 역방향 간선 존재 여부

--------------------------------------------------------------------------------------------------------

절단점(cut vertex) 찾기
: 점과 인접한 간선들을 모두 지웠을 때 해당 컴포넌트가 두 개 이상으로 나뉘는 정점

무향그래프
해당 정점을 지웠을때 컴포넌트가 이전보다 증가했는지 확인한다.
1. 임의의 점에서 dfs를 수행하여 스패닝 트리를 만든다.
2. u가 지워졌을 때 그래프가 조깨지지 않는 유일한 경우는 u의 선조와 자손이 모두 역방향 간선으로 연결된 경우
- dfs 과정에서 각 정점을 루트로 하는 서브트리에서 역방향 간선을 통해 갈 수 있는 최소 깊이를 반환
*u가 스패닝 트리의 루트인 경우 : u가 자손이 없거나 하나뿐인 경우를 제외하면 u는 절단점이 된다.

//그래프 인접 리스트 표현
vector<vector<int>> adj;
vector<int> discoverd;
vector<bool> isCutVertex;
int counter = 0;

//here을 루트로하는 서브트리 절단점들을 찾는다
int findCutVertex(int here, bool isRoot){
    discoverd[here] = counter++;
    int ret = directed[here];
    int children = 0;
    for(int i = 0; i < adj[here].size(); ++i){
        int there = adj[here][i];
        if(discoverd[there] == -1) {
            ++children;
            int subtree = findCutVertex(there, false);
        }
        if(!isRoot && subtree >= discoverd[here]) isRoot = true;
        ret = min(ret, subtree);
    }
    if(isRoot) isCutVertex[here] = (children >= 2);
    return ret;
}

--------------------------------------------------------------------------------------------------------

다리 찾기
: 어떤 간선을 삭제 했을 때 그 간선을 포함하던 컴포넌트가 쪼개지는 간선
*다리는 항상 트리 간선이다.

(u, v)가 다리가 되기 위해서는 (u, v)를 제외한 역방향 간선으로 u 보다 높은 정점에 갈 수 없어야 한다.

---> v와 그 자손들이 역방향 간선으로 갈 수 있는 정점의 최소 발견 순서가 u 후

--------------------------------------------------------------------------------------------------------

이중 결합 컴포넌트 : 무향 그래프에서 절단점을 포함하지 않는 컴포넌트

강경합 컴포넌트 분리(strongly connented components): 
방향 그래프에서 두 정점 u, v에 대해 양방향으로 가는 경로가 모두 있을 때 두 정점은 같은 SCC에 포함되어있다
---> 한 사이클에 포함된 모든 정점은 같은 SCC에 포함된다

*그래프 압축
: 원래 그래프의 정점을 SCC 별로 나누고 각 SCC를 표현하는 정점들을 갖고 그래프를 만드는 과정

타잔(Tarjan) 알고리즘 : dfs 한 번으로 SCC 별로 정점을 분류하는 알고리즘 ===> O(|v| + |E|)
유도 과정은 861p 참고

//그래프 인접리스트 표현
vector<vector<int>> adj;
//각 정점의 컴포넌트 번호 : 정점이 같은 scc에 포함된 경우 같은 번호를 가짐
vector<int> sccId;
//정점의 발견 순서
vector<int> discoverd;
//정점의 번호를 담은 스택
stack<int> st;
int sccCounter, vertexCounter;
//here를 루트로 하는 서브트리에서 역방향 간선, 교차 간선을 통해 갈 수 있는 정점 중 최소 발견 순서 반환
//(이미 scc에 묶인 교차 간선 무시)
int scc(int here){
    int ret = directed[here] = vertexCounter++;
    //스택에 here을 넣는다. here의 후손은 모두 스택에 here 보다 늦게 들어간다.
    st.push(here);
    for(int i = 0; i < adj[here].size(); ++i){
        int there = adj[here][i];
        //(here, there)가 트리 간선
        if(discoverd[there] == -1){
            ret = min(ret, scc(there));
        }
        //there 이 무시해야하는 교차 간선이 아니라면
        else if(sccId[there] == -1){
            ret = min(ret, discoverd[there]);
        }
    }
    if(ret == discoverd[here]){
        while(true) {
            int t = st.top();
            st.pop();
            sccId[t] = sccCounter;
            if(t == here) break;
        }
        ++sccCounter;
    }
    return ret;
}
//Tarjan의 scc 알고리즘
vector<int> tarjanSCC(){
    //배열 초기화
    sccId = discoverd = vector<int>(adj.size(), -1);
    //카운터 초기화
    sccCounter = vertexCounter = 0;
    //모든 정점에 대해 scc 호출
    for(int i = 0; i < adj.size(); ++i){
        if(discoverd[i] == -1) scc(i);
    }
    return sccId;
}

===> scc 위상정렬 : dfs()가 늦게 끝나는 정점부터 배열하면 그래프의 위상정렬 결과를 얻을 수 있다.
*직접 그래프 압축 없이 풀리는 문제도 존재한다.
