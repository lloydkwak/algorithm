정의
: 시작점에서 가까운 정점부터 순서대로 방문하는 탐색 알고리즘

각 정점을 방문할 때 모든 인접 정점을 검사하고 방문하지 않은 정점을 따로 저정.
---> FIFO 특징을 가진 큐를 사용하여 항상 인접한 정점들을 먼저 방문

//그래프이 인접리스트 표현
vector<vector<int>> adj;
//start에서 시작해 너비 우선 탐색을 진행하고 각 정점의 방문 순서 반환
vector<int> bfs(int start){
    //각 정점의 방문 여부
    vector<bool> discovered(adj.size(), false);
    //방문할 정점 목록 저장
    queue<int> q;
    //정점 방문 순서
    vector<int> order;
    discovered[start] = true;
    q.push(start);
    while(!q.empty()){
        int here = q.front();
        q.pop();
        order.push_back(here);
        for(int i = 0; i < adj[here].size(); ++i){
            int there = adj[here][i];
            if(!discovered[there]){
                q.push(there);
                discovered[there] = true;
            }
        }
    }
    return order;
}

*DFS와 달리 BFS는 발견과 방문이 다르다.
1. 발견되지 않은 상태
2. 발견되었지만 아직 방문하지 않은 상태
3. 방문된 상태

*시간 복잡도
-인접 리스트 : O(|V| + |E|)
-인접 행렬 : O(|V^2|)

-------------------------------------------------------------------------------------------------------

최단 경로 문제

-시작좀으로 부터 다른 모든 정점의 최단 경로는 bfs 스패닝 트리 위에서 찾을 수 있다.

void bfs2(int start, vector<int>& distance, vector<int>& parent){
    distance = vector<int>(adj.size(), -1);
    parent = vector<int>(adj.size(), -1);
    queue<int> q;
    distance[start] = 0;
    parent[start] = start;
    q.push(start);
    while(!q.empty){
        int here = q.front();
        q.pop();
        for(int i = 0; i < adj[here].size(); ++i){
            int there = adj[here][i];
            if(distance[there] == -1){
                q.push(there);
                distance[there] = distance[here] + 1;
                parent[there] = here;
            }
        }
    }
}

vector<int> shortestPath(int v, const vector<int>& parent) {
    vector<int> path(1, v);
    while(parent[v] != v){
        v = parent[v];
        path.push_back(v);
    }
    reverse(path.begin(), path.end());
    return path;
}

-------------------------------------------------------------------------------------------------------

