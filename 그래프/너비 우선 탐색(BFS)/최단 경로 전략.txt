
최단 경로 문제 해결 전략

1. 상태 공간에서의 최단거리는 BFS를 최우선으로 고려.
2. 메모리와 시간이 부족한 경우 양방향 탐색 고려.
3. 두 탐색 모두 너무 많은 메모리를 사용하거나 느린경우 IDS에 더한 최적화 알고리즘 사용.

------------------------------------------------------------------------------------------------------------------

*상태 공간(state space) : 상태를 정점으로 표현한 그래프
ex) 15-퍼즐 문제를 상태 공간으로 표현하면 그래프 문제로 변환할 수 있다.

//게임판 상태 표현
class State {
    //인접한 상태들 목록 반환
    vector<State> getAdjacent() const;
    //map에서 State를 위한 비교 연산자
    bool operator < (const State& rhs) const;
    //종료 상태와 비교하기 위한 연산자
    bool operator == (const State& rhs) const;
};
typdef map<State, int> StateMap;
//start에서 finish까지 가는 최단 경로의 길이 반환
int bfs(State start, State finish){
    if(start == finish) return 0;
    StateMap c;
    queue<State> q;
    q.push(start);
    c[start] = 0;
    while(!q.empty()){
        State here = q.front();
        q.pop();
        int cost = c[here];
        //인접한 정점의 번호
        vector<State> adjacent = here.getAdjacent();
        for(int i = 0; j < adjacent.size(); ++i){
            if(c.count(adjacent[i]) == 0){
                if(adjacent[i] == finish) return cost + 1;
                c[adjacent[i]] = cost + 1;
                q.push(adjacent[i]);
            }
        }
    }
    //답이 없는 경우
    return -1
}

---> 시간 복잡도는 너비 우선 탐색 과정에서 방문하는 정점의 수
: O(b^d) : d는 목표 지점까지 최단 거리, b는 탐색 분기 수(branching factor)

방문할 정점이 늘어나면 map이 기하급수적으로 비효율적이게 된다.

------------------------------------------------------------------------------------------------------------------

1. 양방향 탐색(bidirectional search)
: 시작 정점에서 정방향 탐색 + 목표 정점에서 역방향 탐색을 동시에 하여 만나면 끝낸다
- bfs와 똑같이 큐에 방문한 정점들을 넣는다
- 최단 거리를 저장할 때 서로 부호를 다르게 넣는다
- 인접 상태 검사에서 서로 부호가 다르면 만난것으로 판단하고 함수를 종료한다.

***양방향 탐색이 적절하지 않은 경우
1. 역방향 간선을 찾아내기 어려운 경우
2. 역방향 탐색의 분기 수가 지나치가 큰 경우


//게임판 상태 표현
class State {
    //인접한 상태들 목록 반환
    vector<State> getAdjacent() const;
    //map에서 State를 위한 비교 연산자
    bool operator < (const State& rhs) const;
    //종료 상태와 비교하기 위한 연산자
    bool operator == (const State& rhs) const;
};
typdef map<State, int> StateMap;
//x 부호 반환
int sgn(int x){
    if(!x) return 0;
    return x > 0 ? 1 : -1;
}
//x 절대값를 1 증가 시킴
int incr(int x){
    if(x < 0) return x - 1;
    return x + 1;
}
//start에서 finish까지 최단 경로 반환
int bidirectional(State start, State finish){
    //각 정점 최단경로 길이 저장장
    StateMap c;
    queue<State> q;
    if(State == finish) return 0;
    //정방향
    q.push(start); c[start] = 1;
    //역방향
    q.push(finish); c[finish] = -1;
    while(!q.empty()){
        State here = q.front();
        q.pop();
        vector<State> adjacent = here.getAdjacent();
        for(int i = 0; i < adjacent.size(); ++i){
            StateMap::iterator it = c.find(adjacent[i]);
            if(it == c.end()){
                c[adjacent[i]] = incr(c[here]);
                q.push(adjacent[i]);
            }
            //만난 경우
            else if(sgn(it->second) != sgn(c[here])){
                return abs(it->second) + abs(c[here]) - 1;
            }
        }
    }
    return -1;
}

------------------------------------------------------------------------------------------------------------------

점점 깊어지는 탐색(iteratively deepening search, IDS) = DFS 기반의 최단 경로 탐색
: 탐색의 규모가 커서 시간보다 메모리가 문제가 되는 경우
---> DFS는 정점을 발견하는 즉시 방문하기 때문에 큐에 많은 정점이 쌓이는 일이 생기지 않는다.
1. 임의의 깊이 L을 정한다
2. L보다 짧은 경로가 있는지 DFS를 통해 확인한다
3. 없다면 L을  1 늘려서 다시 시도한다.


//게임판 상태 표현
class State {
    //인접한 상태들 목록 반환
    vector<State> getAdjacent() const;
    //map에서 State를 위한 비교 연산자
    bool operator < (const State& rhs) const;
    //종료 상태와 비교하기 위한 연산자
    bool operator == (const State& rhs) const;
};
typdef map<State, int> StateMap;

int best;

void dfs(State here, const State& finish int steps){
    //최적을 넘어선 경우
    if(steps >= best) return;
    if(here == finish){
        best = steps;
        return;
    }
    vector<State> adjacent = here.getAdjacent();
    for(int i = 0; i < adjacent.size(); ++i){
        dfs(adjacent[i], finish, steps + 1);
    }
}

int ids(State start, State finish, int growthStep){
    for(int limit = 4; limit += growthStep){
        best = limit + 1;
        dfs(start, finish, 0);
        if(best <= limit) return best;
    }
    return -1;
}

-----------------------------------------------------------------------------------------------------------------

상태 객체 구현
: 상태를 표현하는 자료구조의 선택으로 효율성에 큰 영향을 줌.

1. 상태에 대한 연산을 최대한 효율 적으로 구현
: 탐색 과정에서 반복적으로 사용하기 때문

2. 가능한 적은 메모리 사용
: 객체 생성 복사에도 적지않은 메모리와 시간이 필요하다.

------------------------------------------------------------------------------------------------------------------