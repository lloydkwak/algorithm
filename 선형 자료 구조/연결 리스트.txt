특정 위치에서의 삽입, 삭제를 상수 시간에 할 수 있게 해줌.
* 배열과는 아주 다른 형태를 가짐.

-원소들이 메모리 여기 저기 흩어져 있고 각 원소들이 이전과 다음 원소를 가르키는 포인터를 가지고 있는 방식.

-----------------------------------------------------------------------------------------------
struct ListNode {
    int element; //담고 있는 원소
    ListNode *prev, *next; //이전 노드, 다음 노드의 포인터터
}
-----------------------------------------------------------------------------------------------
* 연결 리스트는 첫 번째와 마지막 노드에 대한 포인터를 가짐 : head, tail

특정 위치의 원소를 찾는데 선형 시간이 걸린다 (데이터가 연속적으로 저장 되어있지 않기 때문이다)

*** 특정 위치에 삽입, 삭제는 매우 쉬움
= 삽입, 삭제 노드와 이전, 이후 노드의 포인터만 있으면 됨.
-----------------------------------------------------------------------------------------------
c++ STL : list 
java, c# : LinkedList
-----------------------------------------------------------------------------------------------
undo 연산을 할 상수 시간에 할 수 있다. (삭제된 순서 반대로만 가능) ===> 조합 탐색에서 활용 가능

* 커누스의 춤추는 링크들 논문 추천(리스트의 장점을 잘 활용한 알고리즘 제안)